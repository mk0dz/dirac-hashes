name: Automated Version Publish

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (if specified, overrides bump_type)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --only-binary=numpy,scipy numpy scipy
          pip install qiskit matplotlib cryptography pydantic python-multipart
          pip install pytest pytest-cov black isort build wheel
          pip install -e .

      - name: Run basic tests
        run: |
          python -c "from quantum_hash.dirac import DiracHash; print(DiracHash.hash('test').hex())"

      - name: Format with Black and isort
        run: |
          python -m black .
          python -m isort .

  version-bump:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel build

      - name: Bump version
        id: bump_version
        run: |
          current_version=$(grep -Po "__version__ = '\K[^']*" src/quantum_hash/__init__.py)
          echo "Current version: $current_version"

          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            new_version="${{ github.event.inputs.custom_version }}"
          else
            IFS='.' read -r -a version_parts <<< "$current_version"
            major="${version_parts[0]}"
            minor="${version_parts[1]}"
            patch="${version_parts[2]}"

            case "${{ github.event.inputs.bump_type }}" in
              patch)
                new_patch=$((patch + 1))
                new_version="$major.$minor.$new_patch"
                ;;
              minor)
                new_minor=$((minor + 1))
                new_version="$major.$new_minor.0"
                ;;
              major)
                new_major=$((major + 1))
                new_version="$new_major.0.0"
                ;;
            esac
          fi

          echo "New version: $new_version"
          sed -i "s/__version__ = '$current_version'/__version__ = '$new_version'/" src/quantum_hash/__init__.py

          if [ -f "pyproject.toml" ]; then
            sed -i "s/version = \"$current_version\"/version = \"$new_version\"/" pyproject.toml
          fi

          if [ -f "setup.py" ]; then
            sed -i "s/VERSION = '$current_version'/VERSION = '$new_version'/" setup.py
          fi

          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump version to $new_version"
          git push

      - name: Check if tag exists
        id: check_tag
        run: |
          new_version="${{ steps.bump_version.outputs.new_version }}"
          if git rev-parse "v$new_version" >/dev/null 2>&1; then
            echo "Tag v$new_version already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v$new_version does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
            git tag "v$new_version"
            git push origin "v$new_version"

  release-build:
    needs: version-bump
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.16.5  # latest as of 2025

      - name: Build wheels with cibuildwheel
        env:
          CIBW_SKIP: "pp*"
        run: |
          cibuildwheel --output-dir dist

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Create GitHub Release
        if: needs.version-bump.outputs.tag_exists != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-bump.outputs.new_version }}
          name: Release v${{ needs.version-bump.outputs.new_version }}
          generate_release_notes: true
          files: dist/*

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - version-bump
      - release-build
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
